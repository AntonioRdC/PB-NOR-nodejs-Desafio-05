{
  "openapi": "3.0.3",
  "info": {
    "title": "Compass Mart - OpenAPI 3.0",
    "description": "Compasso entered a new branch of the market, CompassMart which is a department store, where its focus is on food marketing.",
    "contact": {
      "name": "Ant√¥nio Ribeiro de Carvalho",
      "email": "antonioribeiroamg@gmail.com",
      "url": "https://github.com/AntonioRdC"
    },
    "version": "1.0.0"
  },
  "tags": [
    {
      "name": "Product"
    }
  ],
  "servers": [
    {
      "url": "https://compasstore.herokuapp.com/api/v1"
    }
  ],
  "paths": {
    "/product": {
      "post": {
        "tags": [
          "Product"
        ],
        "summary": "Creat Product",
        "description": "Creat one product and return the product with id, createdAt, updatedAt",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/product"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "get": {
        "tags": [
          "Product"
        ],
        "summary": "Get Products",
        "description": "This route return all products or filtering by brand and department",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "brand",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "department",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "400": {
            "$ref": "#/components/responses/ValidateError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/product/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "tags": [
          "Product"
        ],
        "summary": "Get product by id",
        "description": "Return one product by id",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "Product"
        ],
        "summary": "Update all attributes of a product",
        "description": "Update all attributes of a product, where all attributes are required",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/product"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Product"
        ],
        "summary": "Updates any product attribute",
        "description": "Updates any product attribute",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/product"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Product"
        ],
        "summary": "Remove one product",
        "description": "Remove one product by id",
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/product/csv": {
      "post": {
        "tags": [
          "Product"
        ],
        "summary": "Creat product with Csv",
        "description": "Created multiples products with csv send along the route",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/product"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "400": {
            "$ref": "#/components/responses/ValidateError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/product/low_stock": {
      "get": {
        "tags": [
          "Product"
        ],
        "summary": "Get products with stock low",
        "description": "Get all products with stock low < 100",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/product/marketplace/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "tags": [
          "Product"
        ],
        "summary": "Get Product and create marketplace",
        "description": "Get Product with id and response marketplace format",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "400": {
            "$ref": "#/components/responses/ValidateError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/user": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Creat User",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/user"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "400": {
            "$ref": "#/components/responses/ValidateError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get Users",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/user/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "patch": {
        "tags": [
          "User"
        ],
        "summary": "Update User",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/user"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Delete User",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Success"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/authenticate": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Creat Token with user",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/user"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "product": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "example": "Azites, √ìleos e Vinagres"
          },
          "description": {
            "type": "string",
            "example": "√ìleo de Soja Soya Garrafa 900ml"
          },
          "department": {
            "type": "string",
            "example": "Congelados"
          },
          "bar_codes": {
            "type": "string",
            "example": 7891437941641
          },
          "brand": {
            "type": "string",
            "example": "Soya"
          },
          "price": {
            "type": "number",
            "format": "double",
            "example": 12.45
          },
          "qtd_stock": {
            "type": "integer",
            "format": "int32",
            "example": 234
          },
          "stock_control_enabled": {
            "type": "string",
            "example": true
          },
          "_id": {
            "type": "string",
            "example": "6316771b0e2917016a3582dc"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2022-09-05T22:24:27.111Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2022-09-05T22:24:27.111Z"
          },
          "__v": {
            "type": "number",
            "example": 0
          }
        }
      },
      "user": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "antonio@email.com"
          },
          "password": {
            "type": "string",
            "example": 123456
          },
          "_id": {
            "type": "string",
            "example": "6316771b0e2917016a3582dc"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2022-09-05T22:24:27.111Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2022-09-05T22:24:27.111Z"
          },
          "__v": {
            "type": "number",
            "example": 0
          }
        }
      }
    },
    "responses": {
      "Success": {
        "description": "200. Request Success"
      },
      "Created": {
        "description": "201. Created"
      },
      "NoContent": {
        "description": "204. No Content"
      },
      "BadRequest": {
        "description": "400. Bad Request"
      },
      "ValidateError": {
        "description": "400. Validate Error"
      },
      "UnauthorizedError": {
        "description": "401. Unauthorized Error"
      },
      "NotFound": {
        "description": "404. Not Found"
      },
      "InternalServerError": {
        "description": "500. Internal Server Error"
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}